####################################################
# Configuration file takes in JSON files created   #
# by tshark.  It then filters out various fields,  #
# renames them and send them to an Elasticsearch   #
# instance.  In the 'output filter, an file output #
# is commented out.  Use this to send output to a  #
# JSON file                                        #
####################################################

input {
   file {
     tags => "json"
     path => ["/var/log/logstash/json/*.json"]
     mode => read
     file_completed_action => log
     file_completed_log_path => "/var/log/logstash/wlan_completed.log"
     file_chunk_size => 53248
     start_position => end
     sincedb_path => "/var/log/logstash/file/.since_db-wlan"
     codec => multiline {
       pattern => "^{"
       negate => "true"
       what => "previous"
       max_lines => 2000
              }
       }
}

filter {
   json {
     source => "message"
   }

# Look for fields within the json file and add a new field with the value
if [layers][frame][frame_frame_time] {
  mutate { add_field => {"frame_time" => "%{[layers][frame][frame_frame_time]}"} }
}
if [layers][frame][frame_frame_time_epoch] {
  mutate { add_field => {"frame_time_epoch" => "%{[layers][frame][frame_frame_time_epoch]}"} }
}
if [layers][frame][frame_frame_number] {
  mutate { add_field => {"frame_number" => "%{[layers][frame][frame_frame_number]}"} }
}
if [layers][wlan][0][wlan_fc_wlan_fc_type] {
  mutate { add_field => {"wlan_fc_type" => "%{[layers][wlan][0][wlan_fc_wlan_fc_type]}"} }
}
if [layers][wlan][0][wlan_fc_wlan_fc_subtype] {
  mutate { add_field => {"wlan_fc_subtype" => "%{[layers][wlan][0][wlan_fc_wlan_fc_subtype]}"} }
}
if [layers][wlan][wlan_fc_wlan_fc_type] {
  mutate { add_field => {"wlan_fc_type" => "%{[layers][wlan][wlan_fc_wlan_fc_type]}"} }
}
if [layers][wlan][wlan_fc_wlan_fc_subtype] {
  mutate { add_field => {"wlan_fc_subtype" => "%{[layers][wlan][wlan_fc_wlan_fc_subtype]}"} }
}
if [layers][wlan][0][wlan_wlan_sa] {
  mutate { add_field => {"source_address" => "%{[layers][wlan][0][wlan_wlan_sa]}"} }
}
if [layers][wlan][wlan_wlan_sa] {
  mutate { add_field => {"source_address" => "%{[layers][wlan][wlan_wlan_sa]}"} }
}
if [layers][wlan][1][wlan_tag_wlan_ssid] {
  mutate { add_field => {"wlan_ssid" => "%{[layers][wlan][1][wlan_tag_wlan_ssid]}"} }
}
if [layers][wlan][0][wlan_wlan_bssid] {
  mutate { add_field => {"wlan_bssid" => "%{[layers][wlan][0][wlan_wlan_bssid]}"} }
}
if [layers][wlan][0][wlan_wlan_bssid_resolved] {
  mutate { add_field => {"wlan_bssid_resolved" => "%{[layers][wlan][0][wlan_wlan_bssid_resolved]}"} }
}
if [layers][wlan][wlan_wlan_bssid] {
  mutate { add_field => {"wlan_bssid" => "%{[layers][wlan][wlan_wlan_bssid]}"} }
}
if [layers][wlan][wlan_wlan_bssid_resolved] {
  mutate { add_field => {"wlan_bssid_resolved" => "%{[layers][wlan][wlan_wlan_bssid_resolved]}"} }
}
if [layers][wlan][0][wlan_wlan_sa_resolved] {
  mutate { add_field => {"source_address_resolved" => "%{[layers][wlan][0][wlan_wlan_sa_resolved]}"} }
}
if [layers][wlan][wlan_wlan_sa_resolved] {
  mutate { add_field => {"source_address_resolved" => "%{[layers][wlan][wlan_wlan_sa_resolved]}"} }
}
if [layers][wlan][0][wlan_wlan_da] {
  mutate { add_field => {"destination_address" => "%{[layers][wlan][0][wlan_wlan_da]}"} }
}
if [layers][wlan][0][wlan_wlan_da_resolved] {
  mutate { add_field => {"destination_address_resolved" => "%{[layers][wlan][0][wlan_wlan_da_resolved]}"} }
}
if [layers][wlan][wlan_wlan_da] {
  mutate { add_field => {"destination_address" => "%{[layers][wlan][wlan_wlan_da]}"} }
}
if [layers][wlan][wlan_wlan_da_resolved] {
  mutate { add_field => {"destination_address_resolved" => "%{[layers][wlan][wlan_wlan_da_resolved]}"} }
}
if [layers][wlan_radio][wlan_radio_wlan_radio_signal_dbm] {
  mutate { add_field => {"wlan_signal_strength" => "%{[layers][wlan_radio][wlan_radio_wlan_radio_signal_dbm]}"} }
}
if [layers][wlan][1][text_wlan_vht_compressed_beamforming_report_snr] {
  mutate { add_field => {"wlan_snr_beamform_report" => "%{[layers][wlan][1][text_wlan_vht_compressed_beamforming_report_snr]}"} }
}
if [layers][frame][frame_frame_protocols] {
  mutate { add_field => {"frame_protocols" => "%{[layers][frame][frame_frame_protocols]}"} }
}
if [layers][wlan][0][wlan_wlan_ra] {
  mutate { add_field => {"receiving_address" => "%{[layers][wlan][0][wlan_wlan_ra]}"} }
}
if [layers][wlan][0][wlan_wlan_ra_resolved] {
  mutate { add_field => {"receiving_address_resolved" => "%{[layers][wlan][0][wlan_wlan_ra_resolved]}"} }
}
if [layers][wlan][0][wlan_wlan_ta] {
 mutate { add_field => {"transmitting_address" => "%{[layers][wlan][0][wlan_wlan_ta]}"} }
}
if [layers][wlan][0][wlan_wlan_ta_resolved] {
 mutate { add_field => {"transmitting_address_resolved" => "%{[layers][wlan][0][wlan_wlan_ta_resolved]}"} }
}
if [layers][wlan][wlan_wlan_ra] {
 mutate { add_field => {"receiving_address" => "%{[layers][wlan][wlan_wlan_ra]}"} }
}
if [layers][wlan][wlan_wlan_ra_resolved] {
  mutate { add_field => {"receiving_address_resolved" => "%{[layers][wlan][wlan_wlan_ra_resolved]}"} }
}
if [layers][wlan][wlan_wlan_ta] {
  mutate { add_field => {"transmitting_address" => "%{[layers][wlan][wlan_wlan_ta]}"} }
}
if [layers][wlan][wlan_wlan_ta_resolved] {
  mutate { add_field => {"transmitting_address_resolved" => "%{[layers][wlan][wlan_wlan_ta_resolved]}"} }
}
if [layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_alt] {
  mutate { add_field => {"gps_altitude" => "%{[layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_alt]}" } }
}
if [layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_lon] {
  mutate { add_field => {"gps_longitude" => "%{[layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_lon]}" } }
}
if [layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_lat] {
  mutate { add_field => {"gps_latitude" => "%{[layers][ppi][ppi_ppi_gps][ppi_gps_ppi_gps_lat]}" } }
}

# Only process the following fields
 prune {
      whitelist_names => ["@timestamp", "tags", "frame_time", "frame_time_epoch", "frame_number", "frame_protocols", "source_address", "destination_address", "receiving_address", "transmitting_address", "source_address_resolved", "destination_address_resolved", "receiving_address_resolved", "transmitting_address_resolved", "wlan_signal_strength", "wlan_ssid", "wlan_bssid", "wlan_bssid_resolved", "wlan_snr_beamform_report", "wlan_fc_type", "wlan_fc_subtype", "gps_latitude", "gps_longitude", "gps_altitude"]
 }

# Provide a frame control description for each frame control type and subtype
   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "0" {
    mutate { add_field => {"wlan_fc_description" => "mgt_association_request"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "1" {
    mutate { add_field => {"wlan_fc_description" => "mgt_association_response"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "2" {
    mutate { add_field => {"wlan_fc_description" => "mgt_reassociation_request"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "3" {
    mutate { add_field => {"wlan_fc_description" => "mgt_reassociation_response"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "4" {
    mutate { add_field => {"wlan_fc_description" => "mgt_probe_request"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "5" {
    mutate { add_field => {"wlan_fc_description" => "mgt_probe_response"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "6" {
    mutate { add_field => {"wlan_fc_description" => "mgt_timing_advertisement"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "7" {
    mutate { add_field => {"wlan_fc_description" => "mgt_reserved_7"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "8" {
    mutate { add_field => {"wlan_fc_description" => "mgt_beacon"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "9" {
    mutate { add_field => {"wlan_fc_description" => "mgt_ATIM"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "10" {
    mutate { add_field => {"wlan_fc_description" => "mgt_disassociation"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "11" {
    mutate { add_field => {"wlan_fc_description" => "mgt_authentication"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "12" {
    mutate { add_field => {"wlan_fc_description" => "mgt_deauthentication"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "13" {
    mutate { add_field => {"wlan_fc_description" => "mgt_action"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "14" {
    mutate { add_field => {"wlan_fc_description" => "mgt_action_nack"}}
   }

   if [wlan_fc_type] == "0" and [wlan_fc_subtype] == "15" {
    mutate { add_field => {"wlan_fc_description" => "mgt_reserved_15"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "0" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_reserved_0"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "1" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_reserved_1"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "2" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_trigger"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "3" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_tack"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "4" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_beamforming_rpt_poll"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "5" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_vht-he_ndp_announcement"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "6" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_ctrl_frame_extension"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "7" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_ctrl_wrapper"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "8" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_block_ack_request"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "9" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_block_ack"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "10" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_ps_poll"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "11" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_rts"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "12" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_cts"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "13" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_ack"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "14" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_cf-end"}}
   }

   if [wlan_fc_type] == "1" and [wlan_fc_subtype] == "15" {
    mutate { add_field => {"wlan_fc_description" => "ctrl_cf-end_AND_cf-ack"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "0" {
    mutate { add_field => {"wlan_fc_description" => "data_data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "1" {
    mutate { add_field => {"wlan_fc_description" => "data_data_AND_cf-ack"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "2" {
    mutate { add_field => {"wlan_fc_description" => "data_data_AND_cf-poll"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "3" {
    mutate { add_field => {"wlan_fc_description" => "data_data_AND_cf-ack_AND_cf-poll"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "4" {
    mutate { add_field => {"wlan_fc_description" => "data_null"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "5" {
    mutate { add_field => {"wlan_fc_description" => "data_cf-ack_no_data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "6" {
    mutate { add_field => {"wlan_fc_description" => "data_cf-poll_no_data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "7" {
    mutate { add_field => {"wlan_fc_description" => "data_cf-ack_AND_cf-poll_no_data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "8" {
    mutate { add_field => {"wlan_fc_description" => "data_qos-data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "9" {
    mutate { add_field => {"wlan_fc_description" => "data_qos-data_AND_cf-ack"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "10" {
    mutate { add_field => {"wlan_fc_description" => "data_qos-data_AND_cf-poll"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "11" {
    mutate { add_field => {"wlan_fc_description" => "data_qos-data_AND_cf-ack_AND_cf-poll"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "12" {
    mutate { add_field => {"wlan_fc_description" => "data_qos_null"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "13" {
    mutate { add_field => {"wlan_fc_description" => "data_reserved_13"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "14" {
    mutate { add_field => {"wlan_fc_description" => "data_qos_cf-poll_no_data"}}
   }

   if [wlan_fc_type] == "2" and [wlan_fc_subtype] == "15" {
    mutate { add_field => {"wlan_fc_description" => "data_qos_cf-ack_AND_cf-poll_no_data"}}
   }

   if [wlan_fc_type] == "3" and [wlan_fc_subtype] == "0" {
    mutate { add_field => {"wlan_fc_description" => "ext_DMG-Beacon"}}
   }

   if [wlan_fc_type] == "3" and [wlan_fc_subtype] == "1" {
    mutate { add_field => {"wlan_fc_description" => "ext_S1G-Beacon"}}
   }

# Convert the frame timestamp to the message timestamp
   date {
        match => [ "frame_time_epoch", "UNIX" ]
        target => "@timestamp"
      }

# Create a Geolocation field
   mutate {
       rename => {
        "gps_longitude" => "[location][lon]"
        "gps_latitude" => "[location][lat]"
    }
  }

}

# Send output to elasticsearch (or the console/log or a JSON file)
output {
   if "json" in [tags] {
      elasticsearch {
         hosts=> "127.0.0.1:9200"
         manage_template => "true"
         template => "/opt/elasticsearch/templates/wifi-template.json"
         template_name => "wifi-pcap"
         index => "wifi-pcap-%{+YYYY.MM.dd}"
#      stdout { codec => rubydebug }
      }
#  file {
#     path => "/var/log/logstash/wlan_pcap.json"
#    }
   }
}
